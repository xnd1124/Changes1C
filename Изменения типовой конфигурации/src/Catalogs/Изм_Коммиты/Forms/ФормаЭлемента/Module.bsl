#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка) 
	МакетКонсоли = ПолучитьОбщийМакет("Изм_bsl_console");
	АдресМакета = ПоместитьВоВременноеХранилище(МакетКонсоли, Новый УникальныйИдентификатор());  
	ВидимостьКартыКода = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ЭтоLinux = ЭтоLinux();
	ОпределитьРазделительПути();                    
	ИзвлечьИсходники();  
КонецПроцедуры
	
#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы
&НаКлиенте
Процедура ПолеHTMLДокументСформирован(Элемент)
	Если ИсходникиЗагружены Тогда
		ДокументЗагружен = Истина;
		ИнициализацияРедактора();
		АктивироватьДополнительныеФункции(); 
		ПоказатьИзменения();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПриАктивизацииСтроки(Элемент) 
	Если ДокументЗагружен Тогда
		ПоказатьИзменения();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодсвечиватьЗапросы(Команда)
	
	ПодсвечиватьЗапросы = НЕ ПодсвечиватьЗапросы;
	УправлениеПодсветкойЗапросов();
	
КонецПроцедуры

&НаКлиенте
Процедура КартаКода(Команда)
	
	ВидимостьКартыКода = НЕ ВидимостьКартыКода;
	View().minimap(ВидимостьКартыКода);
	УправлениеВидимостьюКартыКода();
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаСостояния(Команда)
	
	ВидимостьСтрокиСостояния = НЕ ВидимостьСтрокиСостояния;
	УправлениеВидимостьюСтрокиСостояния();
	
КонецПроцедуры 

&НаКлиенте
Процедура ОтображатьПробелыИТабуляции(Команда)
	
	ОтображатьПробелыИТабуляции = НЕ ОтображатьПробелыИТабуляции;
	View().showStatusBar();
	УправлениеВидимостьюПробеловТабуляций();
	
КонецПроцедуры

&НаКлиенте
Процедура ДвухстороннийРежим(Команда)
	
	ДвухстороннийРежим = Не ДвухстороннийРежим;
	УправлениеДвухстороннимРежимомСравнения();
	
КонецПроцедуры

&НаКлиенте
Процедура СледующееРасхождение(Команда)
	
	View().nextDiff();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредыдущееРасхождение(Команда)
	
	View().previousDiff();
	
КонецПроцедуры

#КонецОбласти                  


#Область РаботаСBSL_Console

&НаКлиенте
Процедура ИнициализацияРедактора()
	
	Инфо = Новый СистемнаяИнформация();
	View().init(Инфо.ВерсияПриложения, ИмяПользователя());
	View().setOption("autoResizeEditorLayout", Истина);
	View().setOption("renderQueryDelimiters", Истина);
	View().setOption("generateModificationEvent", Истина);
	View().hideScrollX();
	View().hideScrollY();
	View().clearMetadata();
	View().setReadOnly(Истина);
	
КонецПроцедуры

&НаКлиенте
Функция View()
	
	Возврат Элементы.ПолеHTML.Документ.defaultView;
	
КонецФункции

&НаКлиенте
Процедура АктивироватьДополнительныеФункции()
	
	Элементы.ПодсвечиватьЗапросы.Доступность = Истина;
	Элементы.КартаКода.Доступность = Истина;
	Элементы.СтрокаСостояния.Доступность = Истина;
	Элементы.ОтображатьПробелыИТабуляции.Доступность = Истина;
	Элементы.СледующееРасхождение.Доступность = Истина;
	Элементы.ПредыдущееРасхождение.Доступность = Истина;
	Элементы.ДвухстороннийРежим.Доступность = Истина;
	
	УправлениеВидимостьюКартыКода();
	УправлениеВидимостьюСтрокиСостояния();
	УправлениеВидимостьюПробеловТабуляций();
	УправлениеПодсветкойЗапросов();
	УправлениеДвухстороннимРежимомСравнения();
	
	УстановитьТекст("", Неопределено, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеВидимостьюКартыКода()
	
	Элементы.КартаКода.Пометка = ВидимостьКартыКода;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеВидимостьюСтрокиСостояния()
	
	Элементы.СтрокаСостояния.Пометка = ВидимостьСтрокиСостояния;
	
	Если ВидимостьСтрокиСостояния Тогда
		View().showStatusBar();
	Иначе
		View().hideStatusBar();
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура УправлениеВидимостьюПробеловТабуляций()

	Элементы.ОтображатьПробелыИТабуляции.Пометка = ОтображатьПробелыИТабуляции;
	View().renderWhitespace(ОтображатьПробелыИТабуляции);
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеДвухстороннимРежимомСравнения()

	Элементы.ДвухстороннийРежим.Пометка = ДвухстороннийРежим;
	Текст = ПолучитьТекстДляСравнения();
	ТекущаяСтрока = View().getCurrentLine();
	View().compare(Текст, ДвухстороннийРежим, Истина);
	View().revealLineInCenter(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеПодсветкойЗапросов()
	
	Элементы.ПодсвечиватьЗапросы.Пометка = ПодсвечиватьЗапросы;
	ПереключитьТему();
	
КонецПроцедуры


&НаКлиенте
Процедура УстановитьТекст(Текст, Позиция, УчитыватьОтступПервойСтроки)
	
	View().updateText(Текст);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьТекстДляСравнения()
	
	Попытка
		Возврат View().editor.getModifiedEditor().getValue();
	Исключение
		Возврат "";
	КонецПопытки;
	
КонецФункции 

&НаКлиенте
Процедура ПереключитьТему()
	
	Тема = ПолучитьНазваниеТемыРедактора();
	View().setTheme(Тема);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьНазваниеТемыРедактора()
	
	Тема = "bsl-white";
	
	Если ПодсвечиватьЗапросы Тогда
		Тема =  "bsl-white-query";
	КонецЕсли;
	
	Возврат Тема;
	
КонецФункции

&НаКлиенте
Процедура ОчиститьТекстРедактора()
	
	Если ДокументЗагружен Тогда
		View().compare();
		ОчиститьТекст();
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Функция ОчиститьТекст()
	
	Возврат View().eraseText();
	
КонецФункции

#КонецОбласти

#Область ПрочиеПроцедурыИФункции   
&НаКлиенте
Функция ЭтоLinux()
	СистемнаяИнформация = Новый СистемнаяИнформация();
	Возврат (0 < Найти(Строка(СистемнаяИнформация.ТипПлатформы), "Linux"));
КонецФункции

&НаКлиенте
Процедура ОпределитьРазделительПути()
	РазделительПути = ПолучитьРазделительПути();
КонецПроцедуры  

&НаКлиенте
Процедура ИзвлечьИсходники()
	КаталогВременныхФайлов = КаталогВременныхФайлов();	
	КаталогИсходников = КаталогВременныхФайлов + "GitCodeView" + РазделительПути;
	СоздатьКаталог(КаталогИсходников);
	ФайлНаДиске = Новый Файл(КаталогИсходников);
	Существует = ФайлНаДиске.Существует();
	Если Существует = Ложь Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Не удалось создать каталог для исходников " + КаталогИсходников);
		Возврат;
	КонецЕсли;	
	
	ФайлНаДиске = Новый Файл(КаталогИсходников + "index.html");
	Существует = ФайлНаДиске.Существует();
	Если Существует = Ложь Тогда
		ИзвлечьИсходникиНаКлиенте();
	Иначе
		СкопироватьИндексныйФайл();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СкопироватьИндексныйФайл()
	ТочкаВхода = КаталогИсходников + "index.html";
	ИндексныйФайл = ИндексныйФайл();
	КопироватьФайл(ТочкаВхода, ИндексныйФайл);   
	HTML = ИндексныйФайл;
	ИсходникиЗагружены = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ИзвлечьИсходникиНаКлиенте()
	УдалитьФайлы(КаталогИсходников, "*.*");  
	ИмяФайла = КаталогИсходников + "bsl_console.zip";
	ДанныеМакета = ПолучитьИзВременногоХранилища(АдресМакета);
	ДанныеМакета.Записать(ИмяФайла);   
	ДатаСеанса = ОбщегоНазначенияКлиент.ДатаСеанса();
	Попытка
		Файл = Новый ЧтениеZipФайла(КаталогИсходников + "bsl_console.zip");
		Файл.ИзвлечьВсе(КаталогИсходников);
		СкопироватьИндексныйФайл();
	Исключение
		ОбщегоНазначенияКлиент.СообщитьПользователю("Не удалось извлечь исходники" + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;

КонецПроцедуры

&НаКлиенте
Функция ИндексныйФайл()
	Возврат КаталогИсходников + Формат(ТекущаяУниверсальнаяДатаВМиллисекундах(), "ЧГ=0") + ".html";
КонецФункции

&НаКлиенте
Процедура ПоказатьИзменения()
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;   
	Файл = ТекущиеДанные.ПутьКФайлу;               
	ОчиститьТекстРедактора();
	Если Файл = "ConfigDumpInfo.xml" Тогда
		УстановитьТекст("Возможность сравнения отсутствует", Неопределено, Ложь);
		View().compare("Возможность сравнения отсутствует", Истина, Истина);
		Возврат;
	КонецЕсли;
	ВерсииФайла = ВерсииФайла(Объект.Код, Файл); 
	ЭтоФайлСКодом = СтрЗаканчиваетсяНа(Файл, ".bsl");
	Если ЭтоФайлСКодом Тогда
		View().setLanguageMode("bsl");
	Иначе
		View().setLanguageMode("xml");
	КонецЕсли;
	
	УстановитьТекст(ВерсииФайла.СтараяВерсия, Неопределено, Ложь);
	View().compare(ВерсииФайла.НоваяВерсия, Истина, Истина); 
	
	Если ЭтоФайлСКодом Тогда
		ПереключитьТему();
	КонецЕсли;
	
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ВерсииФайла(Коммит, Файл)
	Результат = Новый Структура;
	Каталог = Константы.Изм_ЛокальныйКаталогРепозиторияGIt.Получить();
	
	ШаблонИзвлеченияФайла = "show %1:%2";
	КомандаИзвлечения = СтрШаблон(ШаблонИзвлеченияФайла, Коммит, Файл);   
	Результат.Вставить("НоваяВерсия", Изм_РаботаСГИТ.КомандаГИТ(КомандаИзвлечения, Каталог));
	
	ШаблонИзвлеченияФайла = "show %1~1:%2";
	КомандаИзвлечения = СтрШаблон(ШаблонИзвлеченияФайла, Коммит, Файл);   
	РезультатРаботы = Изм_РаботаСГИТ.КомандаГИТ(КомандаИзвлечения, Каталог, Ложь);
	Если ЗначениеЗаполнено(РезультатРаботы.ПотокОшибок)  Тогда
		СодержимоеФайла = "";  // файла может не быть в пред. коммитах
	Иначе
		СодержимоеФайла = РезультатРаботы.ПотокВывода;
	КонецЕсли;
	Результат.Вставить("СтараяВерсия", СодержимоеФайла);
	Возврат Результат;	
КонецФункции // ()


#КонецОбласти