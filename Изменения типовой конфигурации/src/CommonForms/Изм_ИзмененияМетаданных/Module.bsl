#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		Если Параметры.Свойство("Ссылка") = Ложь Тогда
		Возврат;
	КонецЕсли;
	УстановитьПараметрыСписков();
	УстановитьУсловноеОформление();
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
&НаКлиенте
Процедура ИдентификаторМетаданныхПриИзменении(Элемент)
	СписокТехническихПроектов.Параметры.УстановитьЗначениеПараметра("ОбъектМетаданных", ИдентификаторМетаданных);
	СписокКоммитов.Параметры.УстановитьЗначениеПараметра("ОбъектМетаданных", ИдентификаторМетаданных);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
&НаСервере
Процедура УстановитьУсловноеОформление()
	ЭлементОформления = СписокКоммитов.УсловноеОформление.Элементы.Добавить();
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЕстьСвязьСТехПроектами"); 
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; 
	ЭлементОтбора.ПравоеЗначение  = Ложь; 
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ТусклоСерый);
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыСписков()
	ТипСсылки = ТипЗнч(Параметры.Ссылка);
	Если ТипСсылки = Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных") 
		ИЛИ ТипСсылки = Тип("СправочникСсылка.ИдентификаторыОбъектовРасширений") Тогда
		ИдентификаторМетаданных = Параметры.Ссылка;
	Иначе
		ИдентификаторМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Параметры.Ссылка));	
	КонецЕсли;
	СписокТехническихПроектов.Параметры.УстановитьЗначениеПараметра("ОбъектМетаданных", ИдентификаторМетаданных);
	СписокКоммитов.Параметры.УстановитьЗначениеПараметра("ОбъектМетаданных", ИдентификаторМетаданных);
	СписокКоммитов.Параметры.УстановитьЗначениеПараметра("СписокКоммитовПустой", Истина);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоСтроке()    
	СписокКоммитовПоСтроке = СписокКоммитовПоСтроке();
	СписокКоммитов.Параметры.УстановитьЗначениеПараметра("СписокКоммитов", СписокКоммитовПоСтроке);
КонецПроцедуры

&НаСервере
Функция СписокКоммитовПоСтроке()       
	Каталог = Константы.Изм_ЛокальныйКаталогРепозиторияGIt.Получить();  
	РасположенияМетаданных = РасположенияМетаданных();
	Шаблон = "log --pretty=format:%%H -S ""%1"" -- %2";
	Команда = СтрШаблон(Шаблон, СтрокаПоиска, РасположенияМетаданных);
	СписокКоммитовСтрокой = Изм_РаботаСГИТ.КомандаГИТ(Команда, Каталог); 
	Возврат СтрРазделить(СписокКоммитовСтрокой, Символы.ПС);
КонецФункции

&НаСервере
Функция РасположенияМетаданных()
	ПолноеИмя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИдентификаторМетаданных, "ПолноеИмя");  
	ЧастиИмени = СтрРазделить(ПолноеИмя, ".");  
	ТипОбъекта = ЧастиИмени[0];
	ПутьКОбъекту = ТипМетаданныхПоАнглийски(ТипОбъекта);
	РазделительПути = ПолучитьРазделительПути();
	ПутьКОбъекту = ПутьКОбъекту + РазделительПути + ЧастиИмени[1] + "*.*";
	ПутьКОбъекту = ПутьКОбъекту + " " + "CommonModules" + РазделительПути + "txl_" + ЧастиИмени[1] + "*.*";
	Возврат  ПутьКОбъекту;
КонецФункции


Функция ТипМетаданныхПоАнглийски(ТипОбъекта)
	Если ТипОбъекта = "Документ" Тогда
		Возврат "Documents";
	ИначеЕсли ТипОбъекта = "Справочник" Тогда
		Возврат "Catalogs";	 
	ИначеЕсли ТипОбъекта = "БизнесПроцесс" Тогда
		Возврат "BusinessProcesses";		
	ИначеЕсли ТипОбъекта = "ЖурналДокументов" Тогда
		Возврат "DocumentJournals";	
	ИначеЕсли ТипОбъекта = "Задача" Тогда
		Возврат "Tasks";	
	ИначеЕсли ТипОбъекта = "Константа" Тогда
		Возврат "Constants";	
	ИначеЕсли ТипОбъекта = "Обработка" Тогда
		Возврат "DataProcessors";	
	ИначеЕсли ТипОбъекта = "Отчет" Тогда
		Возврат "Reports";	
	ИначеЕсли ТипОбъекта = "ПланВидовРасчета" Тогда
		Возврат "ChartsOfCalculationTypes";	
	ИначеЕсли ТипОбъекта = "ПланВидовХарактеристик" Тогда
		Возврат "ChartsOfCharacteristicTypes";	
	ИначеЕсли ТипОбъекта = "ПланОбмена" Тогда
		Возврат "ExchangePlans";	
	ИначеЕсли ТипОбъекта = "ПланСчетов" Тогда
		Возврат "ChartsOfAccounts";	
	ИначеЕсли ТипОбъекта = "Подсистема" Тогда
		Возврат "Subsystems";	
	ИначеЕсли ТипОбъекта = "РегистрБухгалтерии" Тогда
		Возврат "AccountingRegisters";	
	ИначеЕсли ТипОбъекта = "РегистрНакопления" Тогда
		Возврат "AccumulationRegisters";	
	ИначеЕсли ТипОбъекта = "РегистрСведений" Тогда
		Возврат "InformationRegisters";	
	ИначеЕсли ТипОбъекта = "Роль" Тогда
		Возврат "Roles";	
	КонецЕсли;	
КонецФункции

&НаКлиенте
Процедура НайтиКоммиты(Команда)   
	Элементы.ГруппаОжидание.Видимость = Истина; 
	ПодключитьОбработчикОжидания("ФильтрКоммитов", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	Если не ЗначениеЗаполнено(СтрокаПоиска) Тогда
		СписокКоммитов.Параметры.УстановитьЗначениеПараметра("СписокКоммитовПустой", Истина);  
	иначе
		 НайтиКоммиты("");
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ФильтрКоммитов()
	ДлинаФильтра = СтрДлина(СтрокаПоиска); 
	МинимальнаяДлинаПоиска = 3;
	Если ДлинаФильтра < МинимальнаяДлинаПоиска Тогда
		СписокКоммитов.Параметры.УстановитьЗначениеПараметра("СписокКоммитовПустой", Истина);  
		ПоказатьПредупреждение(, "Поиск осуществляется от 3-х символов");
	Иначе
		СписокКоммитов.Параметры.УстановитьЗначениеПараметра("СписокКоммитовПустой", Ложь);
		УстановитьОтборПоСтроке();
	КонецЕсли;
	
	Элементы.ГруппаОжидание.Видимость = Ложь;
КонецПроцедуры
	
#КонецОбласти


